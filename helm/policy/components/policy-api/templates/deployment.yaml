{{/*
#  ============LICENSE_START=======================================================
#   Copyright (C) 2023 Nordix Foundation.
#  ================================================================================
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#  ============LICENSE_END=========================================================
*/}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/instance: RELEASE
        app.kubernetes.io/managed-by: Helm
      name: {{ .Chart.Name }}
    spec:
      initContainers:
        - command:
          - /app/ready.py
          args:
          - --job-name
          - policy-galera-config
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: {{ .Values.global.repository }}/{{ .Values.global.image.readiness }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          name: {{ .Chart.Name }}-readiness
        - command:
          - sh
          args:
          - -c
          - "cd /config-input && for PFILE in `ls -1`; do envsubst <${PFILE} >/config/${PFILE}; done"
          env:
          - name: SQL_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Chart.Name }}-db-creds
                key: login
          - name: SQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Chart.Name }}-db-creds
                key: password
          - name: RESTSERVER_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Chart.Name }}-restserver-creds
                key: login
          - name: RESTSERVER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Chart.Name }}-restserver-creds
                key: password
          volumeMounts:
          - mountPath: /config-input
            name: apiconfig
          - mountPath: /config
            name: apiconfig-processed
          image: docker.io/dibi/envsubst:1
          imagePullPolicy: {{ .Values.pullPolicy }}
          name: {{ .Chart.Name }}-update-config
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.global.repository }}/{{ .Values.global.image.api }}
          imagePullPolicy: {{ .Values.pullPolicy }}
          command: ["/opt/app/policy/api/bin/policy-api.sh"]
          args: ["/opt/app/policy/api/etc/mounted/apiParameters.yaml"]
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
          # disable liveness probe when breakpoints set in debugger
          # so K8s doesn't restart unresponsive container
          {{- if eq .Values.liveness.enabled true }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
          {{ end -}}
          readinessProbe:
            httpGet:
              path: {{ .Values.readiness.api }}
              port: {{ .Values.service.port }}
              httpHeaders:
                - name: Authorization
                  value: Basic {{ printf "%s:%s" .Values.restServer.user .Values.restServer.password | b64enc }}
              scheme: HTTP
            successThreshold: {{ .Values.readiness.successThreshold }}
            failureThreshold: {{ .Values.readiness.failureThreshold }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.readiness.timeout }}
          volumeMounts:
          - mountPath: /etc/localtime
            name: localtime
            readOnly: true
          - mountPath: /opt/app/policy/api/etc/mounted
            name: apiconfig-processed
          resources:
{{ toYaml .Values.resources.small | indent 12 }}
        {{- if .Values.nodeSelector }}
        nodeSelector:
{{ toYaml .Values.nodeSelector | indent 10 }}
        {{- end -}}
        {{- if .Values.affinity }}
        affinity:
{{ toYaml .Values.affinity | indent 10 }}
        {{- end }}
      serviceAccountName: {{ .Chart.Name }}-read
      volumes:
        - name: localtime
          hostPath:
             path: /etc/localtime
        - name: apiconfig
          configMap:
            name: {{ .Chart.Name }}-configmap
            defaultMode: 0755
        - name: apiconfig-processed
          emptyDir:
            medium: Memory
      imagePullSecrets:
      - name: "default-docker-registry-key"